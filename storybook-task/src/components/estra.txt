import React from 'react';

import TaskList from './TaskList';
import * as TaskStories from './Task.stories';

// redux dependencies
import { Provider } from 'react-redux';
import { configureStore, createSlice } from '@reduxjs/toolkit';

// A super-simple mock of the state of the store
export const MockedState = {
    tasks: [
        { ...TaskStories.Default.args.task, id: '1', title: 'Task 1' },
        { ...TaskStories.Default.args.task, id: '2', title: 'Task 2' },
        { ...TaskStories.Default.args.task, id: '3', title: 'Task 3' },
        { ...TaskStories.Default.args.task, id: '4', title: 'Task 4' },
        { ...TaskStories.Default.args.task, id: '5', title: 'Task 5' },
        { ...TaskStories.Default.args.task, id: '6', title: 'Task 6' },
    ],
    status: 'idle',
    error: null,
};

// A super-simple mock of a redux store
const Mockstore = ({ taskboxState, children }) => (
    <Provider
        store={configureStore({
            reducer: {
                taskbox: createSlice({
                    name: 'taskbox',
                    initialState: taskboxState,
                    reducers: {
                        updateTaskState: (state, action) => {
                            const { id, newTaskState } = action.payload;
                            const task = state.tasks.findIndex((task) => task.id === id);
                            if (task >= 0) {
                                state.tasks[task].state = newTaskState;
                            }
                        },
                    },
                }).reducer,
            },
        })}
    >
        {children}
    </Provider>
);


// excludeStories is a Storybook configuration field that prevents our mocked state to be treated as a story. You can read more about this field in the Storybook documentation.
export default {
    component: TaskList,
    title: 'TaskList',
    decorators: [story => <div style={{ padding: '3rem' }}>{story()}</div>],
    excludeStories: /.*MockedState$/,
};

const Template = () => <TaskList />;

// Shaping the stories through args composition.
// The data was inherited from the Default story in Task.stories.js.
export const Default = Template.bind({});
Default.decorators = [
    (story) => (
        <Mockstore taskboxState={MockedState}>
            {story()}
        </Mockstore>
    )
];

// Shaping the stories through args composition.
// Inherited data coming from the Default story.
export const WithPinnedTasks = Template.bind({});
WithPinnedTasks.decorators = [
    (story) => {
        const pinnedtasks = [
            ...MockedState.tasks.slice(0.5),
            { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' }
        ]
        return (
            <Mockstore taskboxState={{
                ...MockedState,
                tasks: pinnedtasks
            }}>
                {story()}
            </Mockstore>
        )
    }
]

export const Loading = Template.bind({});
Loading.decoratiors = [
    (story) => (
        <Mockstore
            taskboxState={{
                ...MockedState,
                status: 'loading',
            }}
        >
            {story()}
        </Mockstore>
    )
]

// Shaping the stories through args composition.
// Inherited data coming from the Loading story.
export const Empty = Template.bind({});
Empty.decoratiors = [
    (story) => (
        <Mockstore
            taskboxState={{
                ...MockedState,
                tasks: [],
            }}
        >
            {story()}
        </Mockstore>
    )
]